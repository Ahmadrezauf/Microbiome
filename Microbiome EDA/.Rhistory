tTest(x1 =x1 , x2 = x2)
})
DEATtest <- data.frame(GeneID = names(tTestDEA) , P_value = tTestDEA , stringsAsFactors = F)
DEATtest <- subset(DEATtest , P_value < 0.05)
dim(DEATtest)
DEATtestB <- subset(DEATtest , P_value < (0.05 / dim(DEATtest)[1]))
dim(DEATtestB)
DEATtestB$GeneID
tTestDEA <- apply(orderedDataSet , 1 , function(i) {
x1 <- i[1:patientsColumn]
x2 <- i[(patientsColumn + 1):ncol(orderedDataSet)]
tTest(x1 =x1 , x2 = x2)
})
DEATtest <- data.frame(GeneID = names(tTestDEA) , P_value = tTestDEA , stringsAsFactors = F)
adjustedPValues <- p.adjust(DEATtest$P_value , method = "fdr")
DEATtestFDR <- DEATtest
DEATtestFDR$P_value <- adjustedPValues
subset(DEATtestFDR , P_value < 0.05)
intersect(DEATtestB$GeneID , DEATtestFDR$GeneID)
permTest <- apply(orderedDataSet , 1 , function(i) {
x1 <- i[1:patientsColumn]
x2 <- i[(patientsColumn + 1):ncol(orderedDataSet)]
x1df <- data.frame(class = "patient" , counts = x1)
x2df <- data.frame(class = "healthy" , counts = x2)
tmp <- rbind(x1df , x2df)
coin::oneway_test(counts ~ class , data = tmp , distribution = approximate(B=9999))
})
permTest <- apply(orderedDataSet , 1 , function(i) {
x1 <- i[1:patientsColumn]
x2 <- i[(patientsColumn + 1):ncol(orderedDataSet)]
x1df <- data.frame(class = "patient" , counts = x1)
x2df <- data.frame(class = "healthy" , counts = x2)
tmp <- rbind(x1df , x2df)
coin::oneway_test(counts ~ class , data = tmp , distribution = coin::approximate(B=9999))
})
permTest <- apply(orderedDataSet , 1 , function(i) {
x1 <- i[1:patientsColumn]
x2 <- i[(patientsColumn + 1):ncol(orderedDataSet)]
x1df <- data.frame(class = "patient" , counts = x1)
x2df <- data.frame(class = "healthy" , counts = x2)
tmp <- rbind(x1df , x2df)
coin::oneway_test(counts ~ class , data = tmp , distribution = coin::approximate(B=100))
})
permTest
permTest[[1]]
permTest[[2]]
length(permTest)
dim(orderedDataSet)
DEAPermTest <- data.frame()
tmp <- permTest[[2]]
tmp
head(orderedDataSet)
tmp
tmp$p_value
tmp
coin::pvalue(tmp)
coin::pvalue(tmp)[1]
DEAPermTest <- data.frame()
for(i in 1:length(permTest)){
DEAPermTest <- rbind(MicrobeName = rownames(orderedDataSet)[i], P_value = coin::pvalue(permTest[[i]])[1])
}
for(i in 1:length(permTest)){
print(i)
DEAPermTest <- rbind(MicrobeName = rownames(orderedDataSet)[i], P_value = coin::pvalue(permTest[[i]])[1])
}
permTest[[30]]
permTest[[31]]
permTest[[30]]
is.na(permTest[[30]])
library(coin)
?oneway_test
pvalue(permTest[[30]])
orderedDataSet[30 ,]
orderedDataSet$microbeCounts <- rowSums(orderedDataSet)
orderedDataSet %>%
filter(microbeCounts != 0) -> orderedDataSet
permTest <- apply(orderedDataSet , 1 , function(i) {
x1 <- i[1:patientsColumn]
x2 <- i[(patientsColumn + 1):ncol(orderedDataSet)]
x1df <- data.frame(class = "patient" , counts = x1)
x2df <- data.frame(class = "healthy" , counts = x2)
tmp <- rbind(x1df , x2df)
coin::oneway_test(counts ~ class , data = tmp , distribution = approximate(B=100) , )
})
dim(orderedDataSet)
orderedDataSet %>%
select(-c(microbeCounts)) -> orderedDataSet
permTest <- apply(orderedDataSet , 1 , function(i) {
x1 <- i[1:patientsColumn]
x2 <- i[(patientsColumn + 1):ncol(orderedDataSet)]
x1df <- data.frame(class = "patient" , counts = x1)
x2df <- data.frame(class = "healthy" , counts = x2)
tmp <- rbind(x1df , x2df)
coin::oneway_test(counts ~ class , data = tmp , distribution = approximate(B=100) , )
})
DEAPermTest <- data.frame()
for(i in 1:length(permTest)){
print(i)
DEAPermTest <- rbind(MicrobeName = rownames(orderedDataSet)[i], P_value = coin::pvalue(permTest[[i]])[1])
}
head(DEAPermTest)
DEAPermTest <- data.frame()
for(i in 1:length(permTest)){
DEAPermTest <- rbind(DEAPermTest , data.frame(MicrobeName = rownames(orderedDataSet)[i], P_value = coin::pvalue(permTest[[i]])[1]))
}
head(DEAPermTest)
head(orderedDataSet)
groups %>%
filter(isPatient == 1) -> tmp
microbeCountsPatients <- microbeCounts[,tmp$`External ID`]
patientsColumn <- dim(microbeCountsPatients)[2]
#dim(microbeCounts)
groups %>%
filter(isPatient == 0) -> tmp
microbeCountsHealthy <- microbeCounts[,tmp$`External ID`]
orderedDataSet <- cbind(microbeCountsPatients , microbeCountsHealthy)
orderedDataSet$microbeCounts <- rowSums(orderedDataSet)
orderedDataSet %>%
filter(microbeCounts != 0) -> orderedDataSet
head(orderedDataSet)
groups %>%
filter(isPatient == 1) -> tmp
microbeCountsPatients <- microbeCounts[,tmp$`External ID`]
patientsColumn <- dim(microbeCountsPatients)[2]
#dim(microbeCounts)
groups %>%
filter(isPatient == 0) -> tmp
microbeCountsHealthy <- microbeCounts[,tmp$`External ID`]
orderedDataSet <- cbind(microbeCountsPatients , microbeCountsHealthy)
orderedDataSet$microbeCounts <- rowSums(orderedDataSet)
head(orderedDataSet)
tmpRowNames <- rownames(orderedDataSet)
orderedDataSet %>%
filter(microbeCounts != 0) -> orderedDataSet
dim(orderedDataSet)
orderedDataSet %>%
select(-c(microbeCounts)) -> orderedDataSet
rownames(orderedDataSet) <- tmpRowNames
groups %>%
filter(isPatient == 1) -> tmp
microbeCountsPatients <- microbeCounts[,tmp$`External ID`]
patientsColumn <- dim(microbeCountsPatients)[2]
#dim(microbeCounts)
groups %>%
filter(isPatient == 0) -> tmp
microbeCountsHealthy <- microbeCounts[,tmp$`External ID`]
orderedDataSet <- cbind(microbeCountsPatients , microbeCountsHealthy)
orderedDataSet$microbeCounts <- rowSums(orderedDataSet)
tmpRowNames <- rownames(orderedDataSet)
zeroMicrobes <- rownames(which(orderedDataSet$microbeCounts == 0))
dim(zeroMicrobes)
length(zeroMicrobes)
zeroMicrobes
zeroMicrobes <- rownames(orderedDataSet[which(orderedDataSet$microbeCounts == 0)])
zeroMicrobes <- rownames(orderedDataSet[which(orderedDataSet$microbeCounts == 0),])
zeroMicrobes
dim(zeroMicrobes)
length(zeroMicrobes)
orderedDataSet %>%
filter(microbeCounts != 0) -> orderedDataSet
dim(orderedDataSet)
orderedDataSet %>%
select(-c(microbeCounts)) -> orderedDataSet
tmpRowNames <- setdiff(tmpRowNames , zeroMicrobes)
rownames(orderedDataSet) <- tmpRowNames
permTest <- apply(orderedDataSet , 1 , function(i) {
x1 <- i[1:patientsColumn]
x2 <- i[(patientsColumn + 1):ncol(orderedDataSet)]
x1df <- data.frame(class = "patient" , counts = x1)
x2df <- data.frame(class = "healthy" , counts = x2)
tmp <- rbind(x1df , x2df)
coin::oneway_test(counts ~ class , data = tmp , distribution = approximate(B=1000) , )
})
DEAPermTest <- data.frame()
for(i in 1:length(permTest)){
DEAPermTest <- rbind(DEAPermTest , data.frame(MicrobeName = rownames(orderedDataSet)[i], P_value = coin::pvalue(permTest[[i]])[1]))
}
head(DEAPermTest)
adjustedPValues <- p.adjust(DEAPermTest$P_value , method = "fdr")
DEAPermTestFDR <- DEATtest
DEAPermTestFDR$P_value <- adjustedPValues
din(DEAPermTest)
dim(DEAPermTest)
adjustedPValues <- p.adjust(DEAPermTest$P_value , method = "fdr")
adjustedPValues
DEAPermTestFDR <- DEAPermTest
DEAPermTestFDR$P_value <- adjustedPValues
subset(DEAPermTestFDR , P_value < 0.05)
subset(DEAPermTestFDR , P_value < 0.05)
orderedDataSet["Unc02ruj",]
intersect(DEATtestB$MicrobeName , DEAPermTestFDR)
intersect(DEATtestB$MicrobeName , DEAPermTestFDR$MicrobeName)
groups %>%
filter(isPatient == 1) -> tmp
microbeCountsPatients <- microbeCounts[,tmp$`External ID`]
patientsColumn <- dim(microbeCountsPatients)[2]
#dim(microbeCounts)
groups %>%
filter(isPatient == 0) -> tmp
microbeCountsHealthy <- microbeCounts[,tmp$`External ID`]
orderedDataSet <- cbind(microbeCountsPatients , microbeCountsHealthy)
tTestDEA <- apply(orderedDataSet , 1 , function(i) {
x1 <- i[1:patientsColumn]
x2 <- i[(patientsColumn + 1):ncol(orderedDataSet)]
tTest(x1 =x1 , x2 = x2)
})
DEATtest <- data.frame(MicrobeName = names(tTestDEA) , P_value = tTestDEA , stringsAsFactors = F)
DEATtest <- subset(DEATtest , P_value < 0.05)
dim(DEATtest)
DEATtestB <- subset(DEATtest , P_value < (0.05 / dim(DEATtest)[1]))
dim(DEATtestB)
DEATtestB$MicrobeName
tTestDEA <- apply(orderedDataSet , 1 , function(i) {
x1 <- i[1:patientsColumn]
x2 <- i[(patientsColumn + 1):ncol(orderedDataSet)]
tTest(x1 =x1 , x2 = x2)
})
DEATtest <- data.frame(MicrobeName = names(tTestDEA) , P_value = tTestDEA , stringsAsFactors = F)
adjustedPValues <- p.adjust(DEATtest$P_value , method = "fdr")
DEATtestFDR <- DEATtest
DEATtestFDR$P_value <- adjustedPValues
subset(DEATtestFDR , P_value < 0.05)
intersect(DEATtestB$MicrobeName , DEATtestFDR$MicrobeName)
intersect(DEATtestB$MicrobeName , DEAPermTestFDR$MicrobeName)
orderedDataSet.selected <- orderedDataSet[DEAPermTestFDR$MicrobeName , ]
pca <- prcomp(orderedDataSet.selected , center = F , scale. = F)
pcr <- data.frame(pca$r[,1:3] , group = groups$isPatient)
ggplot(pcr) +
geom_point(aes(x = PC1 , y = PC2, color = group)) + theme_bw()
pca <- prcomp(t(orderedDataSet.selected) , center = F , scale. = F)
pcr <- data.frame(pca$r[,1:3] , group = groups$isPatient)
pca <- prcomp(orderedDataSet.selected , center = F , scale. = F)
pcr <- data.frame(pca$r[,1:3] , group = groups$isPatient)
ggplot(pcr) +
geom_point(aes(x = PC1 , y = PC2, color = group)) + theme_bw()
t.orderedDataSet.selected <- t(orderedDataSet.selected)
t.orderedDataSet.selected$isPatinet <- groups$isPatient
t.orderedDataSet.selected <- as.data.frame(t(orderedDataSet.selected))
t.orderedDataSet.selected$isPatinet <- groups$isPatient
fit <- glm(isPatient ~ . , data = t.orderedDataSet.selected , family = "binomial")
t.orderedDataSet.selected <- as.data.frame(t(orderedDataSet.selected))
t.orderedDataSet.selected$isPatient <- groups$isPatient
fit <- glm(isPatient ~ . , data = t.orderedDataSet.selected , family = "binomial")
summary(fit)
DEAPermTestFDR$MicrobeName
selectedMicrobes <- DEAPermTestFDR %>%
filter(P_value < 0.05)
selectedMicrobes <- selectedMicrobes$MicrobeName
intersect(DEATtestB$MicrobeName , selectedMicrobes)
intersect(DEATtestB$MicrobeName , selectedMicrobes)
intersect(DEATtestFDR$MicrobeName , selectedMicrobes)
selectedMicrobes.ttest <- DEATtestFDR %>%
filter(P_value < 0.05)
selectedMicrobes.ttest <- selectedMicrobes.ttest$MicrobeName
intersect(DEATtestB$MicrobeName , selectedMicrobes.ttest)
intersect(selectedMicrobes.ttest , selectedMicrobes)
selectedMicrobes.perm <- selectedMicrobes$MicrobeName
selectedMicrobes <- DEAPermTestFDR %>%
filter(P_value < 0.05)
selectedMicrobes.perm <- selectedMicrobes$MicrobeName
selectedMicrobes <- union(selectedMicrobes.perm , selectedMicrobes.ttest)
selectedMicrobes
length(selectedMicrobes)
orderedDataSet.selected <- orderedDataSet[DEAPermTestFDR$MicrobeName , ]
pca <- prcomp(orderedDataSet.selected , center = F , scale. = F)
pcr <- data.frame(pca$r[,1:3] , group = groups$isPatient)
ggplot(pcr) +
geom_point(aes(x = PC1 , y = PC2, color = group)) + theme_bw()
orderedDataSet.selected <- orderedDataSet[selectedMicrobes , ]
pca <- prcomp(orderedDataSet.selected , center = F , scale. = F)
pcr <- data.frame(pca$r[,1:3] , group = groups$isPatient)
ggplot(pcr) +
geom_point(aes(x = PC1 , y = PC2, color = group)) + theme_bw()
t.orderedDataSet.selected <- as.data.frame(t(orderedDataSet.selected))
t.orderedDataSet.selected$isPatient <- groups$isPatient
fit <- glm(isPatient ~ . , data = t.orderedDataSet.selected , family = "binomial")
summary(fit)
head(t.orderedDataSet.selected)
x
rtsneObj <- Rtsne::Rtsne(X = t.orderedDataSet.selected , dim = 2 , perplexity = 5 , check_duplicates = F,
pca_center = F , pca_scale = F)
tsneCoords <- as.data.frame(rtsneObj$Y)
colnames(tsneCoords) <- c("X" , "Y")
tsneCoords$group <- groups$isPatient
ggplot(as.data.frame(tsneCoords)) +
geom_point(aes(x = X , y = Y, color = group)) +
ggtitle("tSNE on Microbes")
selectedMicrobes
rtsneObj <- Rtsne::Rtsne(X = t.orderedDataSet.selected , dim = 2 , perplexity = 5 , check_duplicates = F,
pca_center = T , pca_scale = T)
tsneCoords <- as.data.frame(rtsneObj$Y)
colnames(tsneCoords) <- c("X" , "Y")
ggplot(as.data.frame(tsneCoords)) +
geom_point(aes(x = X , y = Y, color = group)) +
ggtitle("tSNE on Microbes")
tsneCoords <- as.data.frame(rtsneObj$Y)
tsneCoords$group <- groups$isPatient
ggplot(as.data.frame(tsneCoords)) +
geom_point(aes(x = X , y = Y, color = group)) +
ggtitle("tSNE on Microbes")
tsneCoords <- as.data.frame(rtsneObj$Y)
colnames(tsneCoords) <- c("X" , "Y")
tsneCoords$group <- groups$isPatient
ggplot(as.data.frame(tsneCoords)) +
geom_point(aes(x = X , y = Y, color = group)) +
ggtitle("tSNE on Microbes")
rtsneObj <- Rtsne::Rtsne(X = t.orderedDataSet.selected , dim = 2 , perplexity = 5 , check_duplicates = F,
pca_center = T , pca_scale = T)
tsneCoords <- as.data.frame(rtsneObj$Y)
colnames(tsneCoords) <- c("X" , "Y")
result <- ggplot(as.data.frame(tsneCoords)) +
geom_point(aes(x = X , y = Y, color = group)) +
ggtitle("tSNE on Microbes")
result
tsneCoords <- as.data.frame(rtsneObj$Y)
colnames(tsneCoords) <- c("X" , "Y")
tsneCoords$group <- groups$isPatient
result <- ggplot(as.data.frame(tsneCoords)) +
geom_point(aes(x = X , y = Y, color = group)) +
ggtitle("tSNE on Microbes")
result
kCluster <- kmeans(t.orderedDataSet.selected , centers = 2  , nstart = 100 , algorithm = "Forgy" , iter.max = 10000)
kCluster$cluster
sum(kCluster$cluster == 1)
kCluster <- kmeans(t.orderedDataSet.selected , centers = 2  , nstart = 100 , iter.max = 10000)
kCluster <- kmeans(t.orderedDataSet.selected , centers = 2  , nstart = 100 , iter.max = 10000)
kCluster$cluster
sum(kCluster$cluster == 1)
sum(kCluster$cluster == 2)
kCluster <- kmeans(t.orderedDataSet.selected , centers = 2  , nstart = 178 , iter.max = 10000)
kCluster$cluster
sum(kCluster$cluster == 2)
sum(kCluster$cluster == 1)
kCluster <- kmeans(t.orderedDataSet.selected , centers = 2  , nstart = 20 , iter.max = 10000)
kCluster$cluster
sum(kCluster$cluster == 2)
sum(kCluster$cluster == 1)
sum(groups$isPatient)
178 - 33
178 - 133
library(destiny)
dm2 <- DiffusionMap(data = t.orderedDataSet.selected , n_eigs = 2, density_norm = F , distance = "euclidean")
nrow(t.orderedDataSet.selected)
dim(t.orderedDataSet.selected)
dm2 <- DiffusionMap(data = t(as.matrix(orderedDataSet)) , n_eigs = 2, density_norm = F , distance = "euclidean")
dim(orderedDataSet)
nrow(data)
nrow(orderedDataSet)
t(as.matrix(orderedDataSet))
nrow(t(as.matrix(orderedDataSet)))
dm2 <- DiffusionMap(data = t(as.matrix(orderedDataSet)) , n_eigs = 2, density_norm = F , distance = "euclidean")
dm2 <- DiffusionMap(data = as.matrix(orderedDataSet) , n_eigs = 2, density_norm = F , distance = "euclidean")
dm2 <- DiffusionMap(data = t(as.matrix(orderedDataSet)) , n_eigs = 2, density_norm = F , distance = "euclidean")
tmp <- t(as.matrix(orderedDataSet))
dim(tmp)
tmp <- tmp[!duplicated(tmp),]
dim(tmp)
dm2 <- DiffusionMap(data = t(as.matrix(orderedDataSet)) , n_eigs = 2, density_norm = F , distance = "euclidean", k = 20)
cellTypes <- sapply(strsplit(colnames(iData.selected) , "\\s+") , '[' , 1)
dcf <- data.frame(DC1 = eigenvectors(dm2)[,1] , DC2 = eigenvectors(dm2)[,2] ,
name = colnames(iData.selected) , gr = groups$isPatient)
dcf <- data.frame(DC1 = eigenvectors(dm2)[,1] , DC2 = eigenvectors(dm2)[,2] ,
name = colnames(orderedDataSet) , gr = groups$isPatient)
dcf <- data.frame(DC1 = eigenvectors(dm2)[,1] , DC2 = eigenvectors(dm2)[,2] ,
name = colnames(orderedDataSet) , gr = groups$isPatient)
tmp <- orderedDataSet[!duplicated(orderedDataSet),]
dcf <- data.frame(DC1 = eigenvectors(dm2)[,1] , DC2 = eigenvectors(dm2)[,2] ,
name = colnames(tmp) , gr = groups$isPatient)
tmp <- orderedDataSet[!duplicated(orderedDataSet),]
dcf <- data.frame(DC1 = eigenvectors(dm2)[,1] , DC2 = eigenvectors(dm2)[,2] ,
name = colnames(tmp) , gr = groups$isPatient)
setdiff(colnames(tmp) , colnames(orderedDataSet))
dim(tmp)
tmp <- orderedDataSet[!duplicated(t(as.matrix(orderedDataSet)),]
tmp <- orderedDataSet[!duplicated(t(as.matrix(orderedDataSet))),]
dcf <- data.frame(DC1 = eigenvectors(dm2)[,1] , DC2 = eigenvectors(dm2)[,2] ,
name = colnames(tmp) , gr = groups$isPatient)
setdiff(colnames(tmp) , colnames(orderedDataSet))
colnames(tmp)
colnamed(orderedDataSet)
colnames(orderedDataSet)
dm2 <- DiffusionMap(data = t(as.matrix(orderedDataSet)) , n_eigs = 2, density_norm = F , distance = "euclidean", k = 20)
tmp <- orderedDataSet[!duplicated(t(as.matrix(orderedDataSet))),]
dim(tmp)
duplicated(tmp)
duplicated(orderedDataSet)
setdiff(colnames(tmp) , groups$`External ID`)
tmpSampName <- setdiff(colnames(tmp) , groups$`External ID`)
groupTmp <- groups %>% filter(`External ID` != tmpSampName)
dcf <- data.frame(DC1 = eigenvectors(dm2)[,1] , DC2 = eigenvectors(dm2)[,2] ,
name = colnames(tmp) , gr = groupTmp$isPatient)
tmp <- tmp[,-tmpSampName]
tmp <- tmp %>%
select(-c("206672.1"))
dcf <- data.frame(DC1 = eigenvectors(dm2)[,1] , DC2 = eigenvectors(dm2)[,2] ,
name = colnames(tmp) , gr = groupTmp$isPatient)
dim(tmp)
dim(groupTmp)
groupTmp <- groups %>% filter(`External ID` != tmpSampName)
dim(groupTmp)
groupTmp <- groups %>% filter(`External ID` %in% colnames(tmp))
dcf <- data.frame(DC1 = eigenvectors(dm2)[,1] , DC2 = eigenvectors(dm2)[,2] ,
name = colnames(tmp) , gr = groupTmp$isPatient)
dim(groupTmp)
groupTmp <- groupTmp[!duplicated(groupTmp),]
dcf <- data.frame(DC1 = eigenvectors(dm2)[,1] , DC2 = eigenvectors(dm2)[,2] ,
name = colnames(tmp) , gr = groupTmp$isPatient)
p <- ggplot(dcf) +
geom_point(aes(x = DC1 , y = DC2 , color = cellTypes)) +
scale_color_manual(values = scaleColor)
p
p <- ggplot(dcf) +
geom_point(aes(x = DC1 , y = DC2 , color = gr)) +
scale_color_manual(values = scaleColor)
p
dcf
p <- ggplot(dcf) +
geom_point(aes(x = DC1 , y = DC2 , color = gr)) +
p
p <- ggplot(dcf) +
geom_point(aes(x = DC1 , y = DC2 , color = gr)) +
p
p <- ggplot(dcf) +
geom_point(aes(x = DC1 , y = DC2 , color = gr))
p
dm2 <- DiffusionMap(data = t.orderedDataSet.selected , n_eigs = 2, density_norm = F , distance = "euclidean", k = 20)
tmp <- orderedDataSet[!duplicated(t(as.matrix(orderedDataSet))),]
tmp <- t.orderedDataSet.selected[!duplicated(t(as.matrix(t.orderedDataSet.selected))),]
tmpSampName <- setdiff(colnames(tmp) , groups$`External ID`)
groupTmp <- groups %>% filter(`External ID` %in% colnames(tmp))
groupTmp <- groupTmp[!duplicated(groupTmp),]
tmp <- tmp %>%
select(-c("206672.1"))
dcf <- data.frame(DC1 = eigenvectors(dm2)[,1] , DC2 = eigenvectors(dm2)[,2] ,
name = colnames(tmp) , gr = groupTmp$isPatient)
dm2 <- DiffusionMap(data = t.orderedDataSet.selected , n_eigs = 2, density_norm = F , distance = "euclidean", k = 20)
tmp <- t.orderedDataSet.selected[!duplicated(t(as.matrix(t.orderedDataSet.selected))),]
head(tmp)
tmpSampName <- setdiff(colnames(tmp) , groups$`External ID`)
groupTmp <- groups %>% filter(`External ID` %in% colnames(tmp))
groupTmp <- groupTmp[!duplicated(groupTmp),]
groupTmp
tmpSampName <- setdiff(rownames(tmp) , groups$`External ID`)
groupTmp <- groups %>% filter(`External ID` %in% rownames(tmp))
groupTmp <- groupTmp[!duplicated(groupTmp),]
dcf <- data.frame(DC1 = eigenvectors(dm2)[,1] , DC2 = eigenvectors(dm2)[,2] ,
name = colnames(tmp) , gr = groupTmp$isPatient)
dim(tmp)
dim(groupTmp)
ids <- unique(groups$`External ID`)
tmp <- tmp[ids,]
groupTmp <- groupTmp[!duplicated(groupTmp),]
dcf <- data.frame(DC1 = eigenvectors(dm2)[,1] , DC2 = eigenvectors(dm2)[,2] ,
name = colnames(tmp) , gr = groupTmp$isPatient)
dcf
eigenvectors(dm2)[,1]
tmp <- t.orderedDataSet.selected[!duplicated(t.orderedDataSet.selected),]
tmpSampName <- setdiff(rownames(tmp) , groups$`External ID`)
groupTmp <- groups %>% filter(`External ID` %in% rownames(tmp))
ids <- unique(groups$`External ID`)
tmp <- tmp[ids,]
groupTmp <- groupTmp[!duplicated(groupTmp),]
dcf <- data.frame(DC1 = eigenvectors(dm2)[,1] , DC2 = eigenvectors(dm2)[,2] ,
name = colnames(tmp) , gr = groupTmp$isPatient)
dim(tmp)
dim(groupTmp)
dim(groupTmp)
tmp <- t.orderedDataSet.selected[!duplicated(t.orderedDataSet.selected),]
tmpSampName <- setdiff(rownames(tmp) , groups$`External ID`)
tmpSampName
dim(tmp)
groupTmp <- groups %>% filter(`External ID` %in% rownames(tmp))
ids <- unique(groups$`External ID`)
tmp <- tmp[ids,]
groupTmp <- groupTmp[!duplicated(groupTmp),]
dcf <- data.frame(DC1 = eigenvectors(dm2)[,1] , DC2 = eigenvectors(dm2)[,2] ,
name = colnames(tmp) , gr = groupTmp$isPatient)
dim(tmp)
dimp(tmp)
ids
head(tmp)
tmp <- t.orderedDataSet.selected[!duplicated(t.orderedDataSet.selected),]
tmpSampName <- setdiff(rownames(tmp) , groups$`External ID`)
groupTmp <- groups %>% filter(`External ID` %in% rownames(tmp))
ids <- unique(groups$`External ID`)
groupTmp <- groupTmp[!duplicated(groupTmp),]
dcf <- data.frame(DC1 = eigenvectors(dm2)[,1] , DC2 = eigenvectors(dm2)[,2] ,
name = colnames(tmp) , gr = groupTmp$isPatient)
dim(tmp)
dim(groupTmp)
dim(eigenvectors(dm2))
dim(eigenvectors(dm2)[,1])
length(eigenvectors(dm2)[,1])
dim(eigenvectors(dm2)[,2])
length(eigenvectors(dm2)[,2])
dim(tmp)
dcf <- data.frame(DC1 = eigenvectors(dm2)[,1] , DC2 = eigenvectors(dm2)[,2] ,
name = rownames(tmp) , gr = groupTmp$isPatient)
p <- ggplot(dcf) +
geom_point(aes(x = DC1 , y = DC2 , color = gr))
p
results
result
length(groups$isPatient == 1)
length(groups$isPatient == 0)
sum(groups$isPatient == 0)
install.packages("devtools")
devtools::install_github("bAIo-lab/muvis")
library(muvis)
??ggm
??ggm
?ggm
